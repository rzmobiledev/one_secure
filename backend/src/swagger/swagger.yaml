openapi: 3.0.4
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9

servers:
  - url: http://localhost:5000/api/v1
    description: Dev (development) server

components:
  securitySchemes:
    withCredentials:
      type: http
      scheme: basic
      description: Use Basic Auth with username and password to access the API.
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
  
  security:
  - cookieAuth: []

  schemas:
    login:
      type: object
      properties:
        message:
          type: string
          example: User login successfully

paths:
  /users/login:
    post:
      requestBody:
        description: Login to the system
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email of the user.
                password:
                  type: string
                  format: password
                  description: The password of the user.
              required:
                - email
                - password
      summary: Gain accessToken and refreshToken cookies in header.
      description: We use cookies to store the JWT token for authentication. `NOTE:` Even cookie authentication is vulnerable to Cross-Site Request Forgeries (CSRF) attacks, as express version 4.x update, cookie-session middleware is used to prevent CSRF attacks. Swagger 3.0 does not support for cookie authentication, Kindly use this endpoint with postman or any other API testing tool.
      responses:
        "200": # status code
          description: successful login.
          headers:
            Set-Cookie:
                description: The Set-Cookie header is used to send cookies from the server to the user agent.
                schema:
                  type: string
                  description: JWT token for authentication'
                  example: JSESSIONID=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login"
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        "404":
          description: Invalid email or password provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password"
                  code:
                    type: integer
                    example: 404

  /users/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: integer
            format: int64
      summary: Returns user profile information.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON of user info
          headers:
            Set-Cookie:
                description: The Set-Cookie header is used to send cookies from the server to the user agent.
                schema:
                  type: string
                  description: JWT token for authentication'
                  example: JSESSIONID=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: JSON
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  email:
                    type: string
                    format: email
      security:
      - cookieAuth: []

  /users/logout:
    post:
      summary: Logout from the system
      description: This endpoint is used to logout from the system. It will clear the accessToken and refreshToken cookies.
      responses:
        "200": # status code
          description: successful logout.
          headers:
            Set-Cookie:
                description: The Set-Cookie header is used to send cookies from the server to the user agent.
                schema:
                  type: string
                  description: JWT token for authentication'
                  example: JSESSIONID=; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged out successfully
      security:
      - cookieAuth: []
  
  /users/refresh:
    post:
      summary: Refresh the accessToken and refreshToken cookies
      description: This endpoint is used to refresh the accessToken and refreshToken cookies. It will return a new accessToken and refreshToken cookies.
      responses:
        "200": # status code
          description: successful refresh.
          headers:
            Set-Cookie:
                description: The Set-Cookie header is used to send cookies from the server to the user agent.
                schema:
                  type: string
                  description: JWT token for authentication'
                  example: JSESSIONID=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tokens refreshed successfully"
    security:
      - cookieAuth: []
      
  /users/domaincheck:
    post:
      summary: Python script for checking Mail Authentication Records
      description: |
        The script will check for all the mail authentication records like MX, SPF, DMARC and DKIM. The DKIM record is verfied using the default selectors.
      requestBody:
        description: Login to the system
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                domain:
                  type: string
                  format: string
                  description: domain to check.
                  example: facebook.com
              required:
                - domain
      security:
      - cookieAuth: []

      responses:
        "200": # status code
          description: Domain check result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  registered:
                    type: boolean
                    example: false